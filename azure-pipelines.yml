# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
  branches:
    include:
      - main
      - release-*
pr: none
pool:
  vmImage: 'windows-latest'

variables:
  semanticVersion: "1.0.3"
  solution: '**/*.sln'
  buildPlatform: 'x64'
  buildConfiguration: 'Release'
  isPrerelease: ${{ false }}
  isReleaseBranch: $[ or( eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release-') ) ]
  setupProjectDir: 'RemoteApplicationPublisherSetup'
  setupProject: '**/$(setupProjectDir)/*.wixproj'
  signingToolPath: 'C:\Program Files (x86)\Microsoft SDKs\ClickOnce\SignTool\signtool.exe'

steps:
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'env | sort'
  displayName: 'Display environment variables'

- task: PowerShell@2
  inputs:
    targetType: filePath
    filePath: $(System.DefaultWorkingDirectory)\versionnumber.ps1
    arguments: $(Build.SourcesDirectory) $(semanticVersion) $(Build.BuildId) $$(isPrerelease)
  displayName: 'Setting build version'

- template: code-signing.yml

# Explicitly install .NET 6 SDK because that is what the project is targeting. Newer build agents don't have it installed.
- task: UseDotNet@2
  inputs:
    version: 6.x
  displayName: Explicitly Install .NET 6 SDK

# The setup project effectively has a "pre-build" event that will call dotnet publish on the main project
# to compile it before compiling the setup project itself. There is also a call to sign the output assemblies
# of the main project after it builds. Finally, there is an "after build" event that signs the MSI of the
# setup project.
- task: VSBuild@1
  inputs:
    solution: '$(setupProject)'
    msbuildArgs: '/p:SignFiles=true /p:SignToolPath="$(signingToolPath)"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  displayName: 'Build $(setupProject) with signing'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)\RemoteApplicationPublisher\bin\$(buildConfiguration)\net6.0-windows'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/RemoteApplicationPublisher-$(Build.BuildId).zip'
    replaceExistingArchive: true
    verbose: true
  displayName: 'Zip artifacts'
  condition: and(succeeded(), eq(variables.isReleaseBranch, true))

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)\$(setupProjectDir)'
    contents: '**\bin\$(buildConfiguration)\en-us\*.msi'
    targetFolder: $(Build.ArtifactStagingDirectory)
  displayName: 'Copy installer to staging folder'
  condition: and(succeeded(), eq(variables.isReleaseBranch, true))

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'RemoteAppliationPublisher'
  displayName: 'Publishing the artifacts'
  condition: and(succeeded(), eq(variables.isReleaseBranch, true))

- task: GitHubRelease@1
  inputs:
    gitHubConnection: 'github.com.SafeguardPipelines'
    repositoryName: 'OneIdentity/RemoteApplicationPublisher'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tagSource: 'userSpecifiedTag'
    tag: 'release-$(VersionString)'
    title: '$(VersionString)'
    isPreRelease: $(isPrerelease)
    changeLogCompareToRelease: 'lastFullRelease'
    changeLogType: 'commitBased'
    assets: |
      $(Build.ArtifactStagingDirectory)/**
  displayName: 'Creating and publishing a release to Github'
  condition: and(succeeded(), eq(variables.isReleaseBranch, true))