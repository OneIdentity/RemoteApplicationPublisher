# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
  branches:
    include:
      - main
      - release-*
pr: none
pool:
  vmImage: 'windows-latest'

variables:
  semanticVersion: "1.0.2"
  solution: '**/*.sln'
  buildPlatform: 'x64'
  buildConfiguration: 'Release'
  isPrerelease: ${{ true }}
  isReleaseBranch: $[ or( eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release-') ) ]
  setupProjectDir: 'RemoteApplicationPublisherSetup'
  setupProject: '**/$(setupProjectDir)/*.wixproj'
  codeSigningCertFileName: 'OneIdentityCodeSigning.pfx'
  signingToolPath: 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.18362.0\x64'

steps:
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'env | sort'
  displayName: 'Display environment variables'

- task: PowerShell@2
  inputs:
    targetType: filePath
    filePath: $(System.DefaultWorkingDirectory)\versionnumber.ps1
    arguments: $(Build.SourcesDirectory) $(semanticVersion) $(Build.BuildId) $$(isPrerelease)
  displayName: 'Setting build version'

- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: AzureKeyVault@1
  inputs:
    azureSubscription: 'Azure.Infrastructure.CodeSigning'
    KeyVaultName: 'CodeSigningCertificates'
    SecretsFilter: '*'
  displayName: 'Get code signing certificate from Azure Key Vault'
  condition: and(succeeded(), eq(variables.isReleaseBranch, true))

- powershell: |
      $kvSecretBytes = [System.Convert]::FromBase64String("$(OneIdentity-CodeSigning)")
      $certCollection = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2Collection
      $certCollection.Import($kvSecretBytes,$null,[System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable)
      $protectedCertificateBytes = $certCollection.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Pkcs12,"$(OneIdentity-CodeSigningCertPassword)")
      $certpath = '$(Build.BinariesDirectory)\$(codeSigningCertFileName)'
      Write-Verbose -Verbose $certpath
      [System.IO.File]::WriteAllBytes($certpath, $protectedCertificateBytes)
  displayName: 'Save code signing certificate to PFX file'
  condition: and(succeeded(), eq(variables.isReleaseBranch, true))

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  displayName: 'Build $(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(setupProject)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  displayName: 'Build $(setupProject) no signing'
  condition: and(succeeded(), eq(variables.isReleaseBranch, false))

- task: VSBuild@1
  inputs:
    solution: '$(setupProject)'
    msbuildArgs: '/p:SignFiles=true /p:CertificatePassword=$(OneIdentity-CodeSigningCertPassword) /p:CertificatePath="$(Build.BinariesDirectory)\$(codeSigningCertFileName)" '
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  displayName: 'Build $(setupProject) with signing'
  condition: and(succeeded(), eq(variables.isReleaseBranch, true))

- task: DeleteFiles@1
  inputs:
    SourceFolder: '$(Build.BinariesDirectory)'
    Contents: '$(codeSigningCertFileName)'
  condition: succeededOrFailed()
  displayName: 'Delete code signing certificate files'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)\RemoteApplicationPublisher\bin\$(buildConfiguration)\net6.0-windows'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/RemoteApplicationPublisher-$(Build.BuildId).zip'
    replaceExistingArchive: true
    verbose: true
  displayName: 'Zip artifacts'
  condition: and(succeeded(), eq(variables.isReleaseBranch, true))

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)\$(setupProjectDir)'
    contents: '**\bin\$(buildConfiguration)\en-us\*.msi'
    targetFolder: $(Build.ArtifactStagingDirectory)
  displayName: 'Copy installer to staging folder'
  condition: and(succeeded(), eq(variables.isReleaseBranch, true))

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'RemoteAppliationPublisher'
  displayName: 'Publishing the artifacts'
  condition: and(succeeded(), eq(variables.isReleaseBranch, true))

- task: GitHubRelease@1
  inputs:
    gitHubConnection: 'github.com.SafeguardPipelines'
    repositoryName: 'OneIdentity/RemoteApplicationPublisher'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tagSource: 'userSpecifiedTag'
    tag: 'release-$(VersionString)'
    title: '$(VersionString)'
    isPreRelease: $(isPrerelease)
    changeLogCompareToRelease: 'lastFullRelease'
    changeLogType: 'commitBased'
    assets: |
      $(Build.ArtifactStagingDirectory)/**
  displayName: 'Creating and publishing a release to Github'
  condition: and(succeeded(), eq(variables.isReleaseBranch, true))