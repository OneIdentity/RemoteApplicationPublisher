# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  #version: '1.0.0.$(Build.BuildId)'
  installerProject: '$(Build.SourcesDirectory)\RemoteAppPublisherSetup\RemoteAppPublisherSetup.vdproj'
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  visualStudioPath: '$(ProgramW6432)\Microsoft Visual Studio\2022\Enterprise'
  isPrerelease: ${{ true }}
  isReleaseBranch: $[ or( eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release-') ) ]
  #isReleaseBranch: false

steps:
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'env | sort'
  displayName: 'Display environment variables'

- task: NuGetToolInstaller@1
  displayName: 'Install Nuget CLI'

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'
  displayNme: 'Restore packages'

- task: CmdLine@2
  inputs:
    script: 'DisableOutOfProcBuild.exe'
    workingDirectory: '$(VisualStudioPath)\Common7\IDE\CommonExtensions\Microsoft\VSI\DisableOutOfProcBuild'
  displayName: 'Prepare for MSI build'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    #msbuildArgs: '/p:buildId=$(Build.BuildId)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  displayName: 'Build $(solution)'

- task: CmdLine@2
  displayName: 'Build installer project'
  inputs:
    script: '"$(VisualStudioPath)\Common7\IDE\devenv.com" "$(Solution)" /Project "$(InstallerProject)" /Build "$(BuildConfiguration)|$(BuildPlatform)"'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)\RemoteApplicationPublisher\bin\$(buildConfiguration)\net6.0-windows'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/RemoteApplicationPublisher-$(Build.BuildId).zip'
    replaceExistingArchive: true
    verbose: true
  displayName: 'Zip artifacts'

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'RemoteAppliationPublisher'
  displayName: 'Publishing the artifacts'

- task: GitHubRelease@1
  inputs:
    gitHubConnection: 'github.com.SafeguardPipelines'
    repositoryName: 'OneIdentity/RemoteApplicationPublisher'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tagSource: 'userSpecifiedTag'
    tag: 'release-1.0.0.$(Build.BuildId)'
    title: '1.0.0.$(Build.BuildId)'
    isPreRelease: $(isPrerelease)
    changeLogCompareToRelease: 'lastFullRelease'
    changeLogType: 'commitBased'
    assets: |
      $(Build.ArtifactStagingDirectory)/**
  displayName: 'Creating and publishing a release to Github'
  condition: and(succeeded(), eq(variables.isReleaseBranch, true))